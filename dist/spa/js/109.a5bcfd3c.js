"use strict";(globalThis["webpackChunkquasar"]=globalThis["webpackChunkquasar"]||[]).push([[109],{109:(a,s,r)=>{r.r(s),r.d(s,{default:()=>t});var i=r(9835),u=r(499),l=r(1052);const e=(0,i.uE)('<h4>quasar.config.js</h4><ul class="list"><li> configure 생성 옵션에 주석해제 혹은 새로운 라인을 추가하여 <mark>원하는 옵션을 추가</mark> 할 수 있습니다 (&#39;material-icons-outlined&#39; 등). </li><li> 서버 실행 포트를 설정할 수 있습니다. 실행 시 process.env.PORT가 지정되어 있으면 <mark>env가 우선</mark>입니다. </li><li> framework의 plugins에 원하는 useQuasar로 사용하고자 하는 플러그인을 import 해줍니다. (번들의 최소화를 위해 설정해둔 것 같습니다). 이곳에서 선언되지 않은 quasar 플러그인은 useQuasar의 목록에 나오긴 하지만, 메소드 실행시 에러가 발생합니다. (Loading, Notify, Dialog 등). </li><li>각 화면의 컴포넌트 내에서 import하여 사용은 가능합니다.</li></ul><h4>package.json</h4><p class="text-body2" style="margin-bottom:16px;"> package.json에 각 플랫폼에 맞는 빌드 명령어를 선언해줍니다. </p>',4),o='\n    "build:yarn": "yarn run build",\n    "build:dev": "cross-env APP_ENV=dev quasar build --mode ssr",\n    "build:stg": "cross-env APP_ENV=stg quasar build --mode ssr",\n    "build:prd": "cross-env APP_ENV=production quasar build --mode ssr",\n    "build:spa": "quasar build",\n    "build:android": "quasar build --mode capacitor --target android --debug",\n    "build:ios": "quasar build --mode capacitor --target ios",\n    "build:electron": "quasar build --mode electron",',d=(0,i.aZ)({__name:"SetConfig",setup(a){return(a,s)=>((0,i.wg)(),(0,i.iD)(i.HY,null,[e,(0,i.Wm)((0,u.SU)(l.t),{class:"code",codeValue:o,theme:"dark",lang:"terminal"})],64))}}),n=d,t=n}}]);