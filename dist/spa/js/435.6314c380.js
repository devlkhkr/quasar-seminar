"use strict";(globalThis["webpackChunkquasar"]=globalThis["webpackChunkquasar"]||[]).push([[435],{9435:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var s=t(9835),p=t(499),a=t(1052);const r=(0,s._)("h4",null,"Props를 사용한 부모에서 자식으로 데이터 전달",-1),o=(0,s._)("p",{class:"text-body2"}," 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하려면 props를 사용합니다. ",-1),l=(0,s._)("p",{class:"text-body2"},"자식 컴포넌트에서는 props로 데이터를 수신합니다.",-1),m="\x3c!-- ParentComponent.vue --\x3e\n<template>\n  <div>\n    <child-component :message=\"messageFromParent\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\n\n// 자식 컴포넌트로 전달할 데이터\nconst messageFromParent = ref('안녕, 자식 컴포넌트!');\n",u="\x3c!-- ChildComponent.vue --\x3e\n<template>\n  <div>\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, PropType } from 'vue';\n\n// props로 받은 데이터 정의\nconst props = defineProps({\n  message: {\n    type: String as PropType<string>,\n    required: true\n  }\n});\n",c=(0,s.aZ)({__name:"CmpntToCmpnt",setup(e){return(e,n)=>((0,s.wg)(),(0,s.iD)(s.HY,null,[r,o,(0,s.Wm)((0,p.SU)(a.t),{class:"code",codeValue:m,theme:"dark",lang:"vue"}),l,(0,s.Wm)((0,p.SU)(a.t),{class:"code",codeValue:u,theme:"dark",lang:"vue"})],64))}}),d=c,i=d}}]);